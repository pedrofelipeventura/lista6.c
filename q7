#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

// Função para calcular o Erro Médio Quadrático (RMSE)
float calcular_rmse(float *A, float *B, int N) {
    float soma = 0.0;
    for (int i = 0; i < N; i++) {
        soma += pow(A[i] - B[i], 2); // Soma dos quadrados das diferenças
    }
    return sqrt(soma / N); // Raiz quadrada da média dos quadrados
}

int main() {
    int N;

    // Solicita o número de elementos para os vetores
    printf("Digite o número de elementos dos vetores: ");
    scanf("%d", &N);

    // Aloca dinamicamente os vetores A e B
    float *A = (float*) malloc(N * sizeof(float));
    float *B = (float*) malloc(N * sizeof(float));
    if (A == NULL || B == NULL) {
        printf("Erro ao alocar memória.\n");
        return 1;
    }

    // Inicializa o gerador de números aleatórios
    srand(time(NULL));

    // Preenche os vetores A e B com valores aleatórios entre 0 e 100
    for (int i = 0; i < N; i++) {
        A[i] = (float)(rand() % 101); // Números aleatórios entre 0 e 100
        B[i] = (float)(rand() % 101); // Números aleatórios entre 0 e 100
    }

    // Exibe os vetores A e B
    printf("Vetor A: ");
    for (int i = 0; i < N; i++) {
        printf("%.2f ", A[i]);
    }
    printf("\n");

    printf("Vetor B: ");
    for (int i = 0; i < N; i++) {
        printf("%.2f ", B[i]);
    }
    printf("\n");

    // Calcula o erro médio quadrático (RMSE)
    float rmse = calcular_rmse(A, B, N);

    // Exibe o resultado
    printf("Erro Médio Quadrático (RMSE): %.2f\n", rmse);

    // Libera a memória alocada
    free(A);
    free(B);

    return 0;
}
